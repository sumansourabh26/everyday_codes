#include<iostream>
#include<string>
#include<vector>

using namespace std;

int func[][6]={{0,0,1,1,2,2},{0,0,1,2,1,2},{0,0,1,2,2,1},{0,0,2,1,1,2},{0,0,2,1,2,1},{0,0,2,2,1,1},
			   {0,1,0,1,2,2},{0,1,0,2,1,2},{0,1,0,2,2,1},{0,1,1,0,2,2},{0,1,1,2,0,2},{0,1,1,2,2,0},
			   {0,1,2,0,1,2},{0,1,2,0,2,1},{0,1,2,1,0,2},{0,1,2,1,2,0},{0,1,2,2,0,1},{0,1,2,2,1,0},
			   {0,2,0,1,1,2},{0,2,0,1,2,1},{0,2,0,2,1,1},{0,2,1,0,1,2},{0,2,1,0,2,1},{0,2,1,1,0,2},
			   {0,2,1,1,2,0},{0,2,1,2,0,1},{0,2,1,2,1,0},{0,2,2,0,1,1},{0,2,2,1,0,1},{0,2,2,1,1,0},
			   {1,0,0,1,2,2},{1,0,0,2,1,2},{1,0,0,2,2,1},{1,0,1,0,2,2},{1,0,1,2,0,2},{1,0,1,2,2,0},
			   {1,0,2,0,1,2},{1,0,2,0,2,1},{1,0,2,1,0,2},{1,0,2,1,2,0},{1,0,2,2,0,1},{1,0,2,2,1,0},
			   {1,1,0,0,2,2},{1,1,0,2,0,2},{1,1,0,2,2,0},{1,1,2,0,0,2},{1,1,2,0,2,0},{1,1,2,2,0,0},
			   {1,2,0,0,1,2},{1,2,0,0,2,1},{1,2,0,1,0,2},{1,2,0,1,2,0},{1,2,0,2,0,1},{1,2,0,2,1,0},
			   {1,2,1,0,0,2},{1,2,1,0,2,0},{1,2,1,2,0,0},{1,2,2,0,0,1},{1,2,2,0,1,0},{1,2,2,1,0,0},
			   {2,0,0,1,1,2},{2,0,0,1,2,1},{2,0,0,2,1,1},{2,0,1,0,1,2},{2,0,1,0,2,1},{2,0,1,1,0,2},
			   {2,0,1,1,2,0},{2,0,1,2,0,1},{2,0,1,2,1,0},{2,0,2,0,1,1},{2,0,2,1,0,1},{2,0,2,1,1,0},
			   {2,1,0,0,1,2},{2,1,0,0,2,1},{2,1,0,1,0,2},{2,1,0,1,2,0},{2,1,0,2,0,1},{2,1,0,2,1,0},
			   {2,1,1,0,0,2},{2,1,1,0,2,0},{2,1,1,2,0,0},{2,1,2,0,0,1},{2,1,2,0,1,0},{2,1,2,1,0,0},
			   {2,2,0,0,1,1},{2,2,0,1,0,1},{2,2,0,1,1,0},{2,2,1,0,0,1},{2,2,1,0,1,0},{2,2,1,1,0,0}};
struct node{
    char root;
    node* left, right;
    node(char x){
        root = x;
        left = NULL;
        right = NULL;
    }
};

struct rtrn{
    node* t;
    bool isMatch;
};

rtrn toMatch(string* prestr, int t1, string* instr, int t2, string* poststr, int t3)//, node* &tree){
    if(t1==t2){
        if(prestr != instr) return false;
        else if(t1 == 1){
            if(t3==2){

            }
        }
    }
}

int main(){
    string prestr, instr, poststr;
    cin>>prestr>>instr>>poststr;
    node* tree;

    rtrn toMatch(&prestr,1, &instr, 2, &poststr, 3, tree);


}
